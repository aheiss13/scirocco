/**
 * Provides some utilities for getting Deployer options from the command line.
 */
const Deployer = require("./deployer");

const LESS_COMMON = "Less Commonly Used";

/**
 * yargs coerce function that takes an array of strings like "key=value", and turns
 * it into a dictionary of key-value pairs.
 */
const coerceKeyValueArray = values =>
    values.reduce((dict, v) => {
        const match = /^([^=]+)=(.*)/.exec(v);
        if (!match) {
            throw new Error(`Invalid --param: "${v}".`);
        }
        const [, paramName, paramValue] = match;
        dict[paramName] = paramValue;
        return dict;
    }, {});

const PREP = "prepare";
const DEPLOY = "deploy";
const DESC = "describe";
const CLEAN = "cleanup";

function getOptions() {
    return {
        bucket: {
            describe: "The name of the S3 bucket to copy deploy resources to.",
            type: "string",
            requiresArg: true,
            for: [PREP]
        },
        "deploy-prefix": {
            describe:
                "An S3 path prefix to use on any deploy resources copied to S3.",
            type: "string",
            requiresArg: true,
            group: LESS_COMMON,
            for: [PREP]
        },
        param: {
            describe:
                'Specify a parameter for your CloudFormation template as "KEY=VALUE". Specify this option multiple times to specify multiple parameters.',
            alias: "params",
            array: true,
            type: "string",
            requiresArg: true,
            coerce: coerceKeyValueArray
        },
        tag: {
            describe:
                'Specify a tag to apply the CloudFormation stack as "KEY=VALUE". Specify this option multiple times to specify multiple tags.',
            array: true,
            alias: "tags",
            type: "string",
            requiresArg: true,
            coerce: coerceKeyValueArray,
            for: [DEPLOY]
        },
        env: {
            describe: "The name of the environment to deploy to.",
            type: "string",
            requiresArg: true
        },
        "target-stack": {
            describe: "The name of the stack to act on.",
            type: "string",
            requiresArg: true
        },
        role: {
            describe: "The name of the AWS Role to use for authentication.",
            type: "string",
            requiresArg: true
        },
        "dry-run": {
            describe:
                "Don't actually execute any commands, just echo the generated commands and exit",
            boolean: true
        },
        "env-name-param-name": {
            describe:
                "The name of the CloudFormation parameter to which the deploy environment will be assigned.",
            type: "string",
            requiresArg: true,
            group: LESS_COMMON
        },
        "cfn-stack-name": {
            describe:
                "The name to use for the CloudFormation stack that is being created or otherwise acted on.",
            type: "string",
            requiresArg: true,
            group: LESS_COMMON,
            for: [DEPLOY, DESC, CLEAN]
        },
        "input-template": {
            describe:
                "The path to the input CloudFormation stack template file (must be YAML).",
            type: "string",
            requiresArg: true,
            group: LESS_COMMON,
            for: [PREP]
        },
        "deploy-template": {
            describe:
                "The path to the packaged CloudFormation stack template file to be generated by the 'prepare' step and deployed by the 'deploy' step.",
            type: "string",
            requiresArg: true,
            group: LESS_COMMON,
            for: [PREP, DEPLOY]
        },
        "auth-cmd": {
            describe: "The command to execute to authenticate to AWS",
            type: "string",
            requiresArg: true,
            group: LESS_COMMON
        },
        capabilities: {
            describe:
                "Add a capability that CloudFormation will require to deploy your stack. Specify this option multiple times to add multiple capabilities. Typical values are CAPABILITY_IAM and CAPABILITY_NAMED_IAM",
            array: true,
            type: "string",
            requiresArg: true,
            for: [DEPLOY]
        }
    };
}

/**
 * Given the parsed args object, returns a new deployer.
 * @param {*} args
 */
function createDeployer(args) {
    return new Deployer(
        args.targetStack,
        args.env,
        {
            deployBucket: args.bucket,
            deployBucketPrefix: args.deployPrefix,
            role: args.role,
            envNameParamName: args.envNameParamName,
            cfnStackName: args.cfnStackName,
            inputTemplate: args.inputTemplate,
            outputTemplate: args.deployTemplate,
            stackTags: args.tags,
            authenticationCommand: args.authCmd,
            capabilities: args.capabilities,
            dryRun: args.dryRun
        },
        args.params
    );
}

/**
 * Given an arg parser like `yargs`, adds Deployer options to the parser.
 * @param {*} yargs The arg parser
 * @param {*} forWhat An object of boolean-values properties specifying what
 * scenario to include options for. If not given, includes options for all
 * scenarios. If given, only specified scenarios are included. Valid property
 * values are `prepare`, `deploy`, `describe`, and `cleanup`.
 */
function addArgs(
    yargs,
    { prepare = false, deploy = false, describe = false, cleanup = false } = {
        prepare: true,
        deploy: true,
        describe: true,
        cleanup: true
    }
) {
    const keys = ["prepare", "deploy", "describe", "cleanup"];
    const addFor = [PREP, DEPLOY, DESC, CLEAN].filter(
        (value, idx) => ({ prepare, deploy, describe, cleanup }[keys[idx]])
    );

    Object.entries(getOptions()).forEach(([optName, optConfig]) => {
        if (
            typeof optConfig.for === "undefined" ||
            optConfig.for.some(scope => addFor.indexOf(scope) >= 0)
        ) {
            const yargConfig = { ...optConfig };
            delete yargConfig.for;
            yargs.option(optName, yargConfig);
        }
    });
}

module.exports = { addArgs, createDeployer };
